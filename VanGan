{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport torch\nfrom torchvision import transforms, datasets\nfrom torch import nn, optim\nfrom IPython import display\nimport torchvision.utils as vutils\nfrom matplotlib import pyplot as plt\n","metadata":{"id":"w7eaSALuokxz","execution":{"iopub.status.busy":"2021-06-12T19:02:53.947134Z","iopub.execute_input":"2021-06-12T19:02:53.947682Z","iopub.status.idle":"2021-06-12T19:02:55.502402Z","shell.execute_reply.started":"2021-06-12T19:02:53.947567Z","shell.execute_reply":"2021-06-12T19:02:55.501127Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"dir =  './'\nbatch_size = 100","metadata":{"id":"k67TEUfRqWaF","execution":{"iopub.status.busy":"2021-06-12T19:02:55.504450Z","iopub.execute_input":"2021-06-12T19:02:55.504915Z","iopub.status.idle":"2021-06-12T19:02:55.513071Z","shell.execute_reply.started":"2021-06-12T19:02:55.504868Z","shell.execute_reply":"2021-06-12T19:02:55.511632Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"def download_mnist(dir):\n  compose = transforms.Compose([\n                                transforms.ToTensor(),\n                                transforms.Normalize([1/2],[1/2])\n  ])\n  tvdataset = datasets.MNIST(root=dir,train=True,transform = compose,download=True)\n  return tvdataset","metadata":{"id":"0V03LPKWp1id","execution":{"iopub.status.busy":"2021-06-12T19:02:55.516400Z","iopub.execute_input":"2021-06-12T19:02:55.517202Z","iopub.status.idle":"2021-06-12T19:02:55.524747Z","shell.execute_reply.started":"2021-06-12T19:02:55.517152Z","shell.execute_reply":"2021-06-12T19:02:55.523260Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"##Download MNIST\ndata = download_mnist(dir)","metadata":{"id":"QlQCxGXCpfWa","outputId":"0316cb5d-c70a-4253-8c5b-d05c45558202","execution":{"iopub.status.busy":"2021-06-12T19:02:55.527828Z","iopub.execute_input":"2021-06-12T19:02:55.528627Z","iopub.status.idle":"2021-06-12T19:02:55.597497Z","shell.execute_reply.started":"2021-06-12T19:02:55.528507Z","shell.execute_reply":"2021-06-12T19:02:55.596380Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"#Creating Dataloder to iterate \ndata_loader = torch.utils.data.DataLoader(data, batch_size=batch_size,shuffle=True)\nnum_batches = len(data_loader)\nprint(\"Number of Batches = {}\".format(num_batches))","metadata":{"id":"sTZ3jwDtqbTI","outputId":"23fbd27e-5e8d-4292-ff8d-30f8a1c38ebc","execution":{"iopub.status.busy":"2021-06-12T19:02:55.599229Z","iopub.execute_input":"2021-06-12T19:02:55.599719Z","iopub.status.idle":"2021-06-12T19:02:55.607081Z","shell.execute_reply.started":"2021-06-12T19:02:55.599671Z","shell.execute_reply":"2021-06-12T19:02:55.605682Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Number of Batches = 600\n","output_type":"stream"}]},{"cell_type":"code","source":"class DiscriminatorNetwork(torch.nn.Module):\n  \"\"\"\n  A two hidden later dicriminator NN\n  \"\"\"\n\n  def __init__(self):\n    super(DiscriminatorNetwork,self).__init__()\n    num_features = 784\n    num_outs = 1\n\n    self.hidden_layer_0 = nn.Sequential(\n        nn.Linear(num_features, 1024),\n        nn.LeakyReLU(0.3),\n        nn.Dropout(0.3)\n    )\n\n    self.hidden_layer_1 = nn.Sequential(\n        nn.Linear(1024, 512),\n        nn.LeakyReLU(0.3),\n        nn.Dropout(0.3)\n    )\n     \n    \n    self.out =  nn.Sequential(\n        nn.Linear(512, num_outs),\n        nn.Sigmoid()\n    )\n  \n  def forward(self,x):\n    x = self.hidden_layer_0(x)\n    x = self.hidden_layer_1(x)\n    x = self.out(x)\n    return x","metadata":{"id":"LtJCVJ6uq4LC","execution":{"iopub.status.busy":"2021-06-12T19:02:55.609090Z","iopub.execute_input":"2021-06-12T19:02:55.610009Z","iopub.status.idle":"2021-06-12T19:02:55.622261Z","shell.execute_reply.started":"2021-06-12T19:02:55.609960Z","shell.execute_reply":"2021-06-12T19:02:55.621022Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"discriminator = DiscriminatorNetwork()","metadata":{"id":"tzzDnbYrsdsH","execution":{"iopub.status.busy":"2021-06-12T19:02:55.624295Z","iopub.execute_input":"2021-06-12T19:02:55.624852Z","iopub.status.idle":"2021-06-12T19:02:55.655352Z","shell.execute_reply.started":"2021-06-12T19:02:55.624795Z","shell.execute_reply":"2021-06-12T19:02:55.654306Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"class GeneratorNetwork(torch.nn.Module):\n  \"\"\"\n  A two hidden later GeneratorNetwork NN\n  \"\"\"\n\n  def __init__(self):\n    super(GeneratorNetwork,self).__init__()\n    num_features = 100\n    num_outs = 784\n\n    self.hidden_layer_0 = nn.Sequential(\n        nn.Linear(num_features, 256),\n        nn.LeakyReLU(0.3),\n        nn.Dropout(0.3)\n    )\n\n    self.hidden_layer_1 = nn.Sequential(\n        nn.Linear(256, 512),\n        nn.LeakyReLU(0.3),\n        nn.Dropout(0.3)\n    )\n     \n   \n    self.out =  nn.Sequential(\n        nn.Linear(512, num_outs),\n        nn.Tanh()\n    )\n  \n  def forward(self,x):\n    x = self.hidden_layer_0(x)\n    x = self.hidden_layer_1(x)\n    x = self.out(x)\n    return x","metadata":{"id":"M3K1FJCJsgoi","execution":{"iopub.status.busy":"2021-06-12T19:02:55.659843Z","iopub.execute_input":"2021-06-12T19:02:55.660163Z","iopub.status.idle":"2021-06-12T19:02:55.671627Z","shell.execute_reply.started":"2021-06-12T19:02:55.660132Z","shell.execute_reply":"2021-06-12T19:02:55.670520Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"generator = GeneratorNetwork()","metadata":{"id":"xHdl2jPYtOu9","execution":{"iopub.status.busy":"2021-06-12T19:02:55.674538Z","iopub.execute_input":"2021-06-12T19:02:55.675075Z","iopub.status.idle":"2021-06-12T19:02:55.688742Z","shell.execute_reply.started":"2021-06-12T19:02:55.675029Z","shell.execute_reply":"2021-06-12T19:02:55.687681Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"if torch.cuda.is_available():\n    discriminator.cuda()\n    generator.cuda()","metadata":{"id":"y0siWsVttSoT","execution":{"iopub.status.busy":"2021-06-12T19:02:55.690428Z","iopub.execute_input":"2021-06-12T19:02:55.690895Z","iopub.status.idle":"2021-06-12T19:03:00.880418Z","shell.execute_reply.started":"2021-06-12T19:02:55.690850Z","shell.execute_reply":"2021-06-12T19:03:00.879310Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"print(discriminator)","metadata":{"id":"eHd5QS97tXfr","outputId":"ff2a7b97-9178-432b-8fc9-d656898ddf3a","execution":{"iopub.status.busy":"2021-06-12T19:03:00.882016Z","iopub.execute_input":"2021-06-12T19:03:00.882510Z","iopub.status.idle":"2021-06-12T19:03:00.889094Z","shell.execute_reply.started":"2021-06-12T19:03:00.882467Z","shell.execute_reply":"2021-06-12T19:03:00.887794Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"DiscriminatorNetwork(\n  (hidden_layer_0): Sequential(\n    (0): Linear(in_features=784, out_features=1024, bias=True)\n    (1): LeakyReLU(negative_slope=0.3)\n    (2): Dropout(p=0.3, inplace=False)\n  )\n  (hidden_layer_1): Sequential(\n    (0): Linear(in_features=1024, out_features=512, bias=True)\n    (1): LeakyReLU(negative_slope=0.3)\n    (2): Dropout(p=0.3, inplace=False)\n  )\n  (out): Sequential(\n    (0): Linear(in_features=512, out_features=1, bias=True)\n    (1): Sigmoid()\n  )\n)\n","output_type":"stream"}]},{"cell_type":"code","source":"print(generator)","metadata":{"id":"j7CPMM-ftZF2","outputId":"011c7411-f075-4cf1-bf62-a36ea8d12ca1","execution":{"iopub.status.busy":"2021-06-12T19:03:00.890922Z","iopub.execute_input":"2021-06-12T19:03:00.891787Z","iopub.status.idle":"2021-06-12T19:03:00.905977Z","shell.execute_reply.started":"2021-06-12T19:03:00.891644Z","shell.execute_reply":"2021-06-12T19:03:00.904595Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"GeneratorNetwork(\n  (hidden_layer_0): Sequential(\n    (0): Linear(in_features=100, out_features=256, bias=True)\n    (1): LeakyReLU(negative_slope=0.3)\n    (2): Dropout(p=0.3, inplace=False)\n  )\n  (hidden_layer_1): Sequential(\n    (0): Linear(in_features=256, out_features=512, bias=True)\n    (1): LeakyReLU(negative_slope=0.3)\n    (2): Dropout(p=0.3, inplace=False)\n  )\n  (out): Sequential(\n    (0): Linear(in_features=512, out_features=784, bias=True)\n    (1): Tanh()\n  )\n)\n","output_type":"stream"}]},{"cell_type":"code","source":"def generate_noise(size):\n    n = Variable(torch.randn(size, 100))\n    if torch.cuda.is_available(): return n.cuda() \n    return n","metadata":{"id":"f2SNO5LAtajv","execution":{"iopub.status.busy":"2021-06-12T19:03:00.907877Z","iopub.execute_input":"2021-06-12T19:03:00.908486Z","iopub.status.idle":"2021-06-12T19:03:00.917672Z","shell.execute_reply.started":"2021-06-12T19:03:00.908375Z","shell.execute_reply":"2021-06-12T19:03:00.916527Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"#Define BCE loss\nloss = nn.BCELoss()\n\n# Numbers of steps after which to update discriminator\nd_steps = 1 # Goodfellow et. al 2014 mention this in his paper\n\n# Number of epochs\nnum_epochs = 50","metadata":{"id":"y4OjvOxZtedp","execution":{"iopub.status.busy":"2021-06-12T19:03:00.919683Z","iopub.execute_input":"2021-06-12T19:03:00.920230Z","iopub.status.idle":"2021-06-12T19:03:00.926648Z","shell.execute_reply.started":"2021-06-12T19:03:00.920184Z","shell.execute_reply":"2021-06-12T19:03:00.925336Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"from torch.autograd.variable import Variable\n\ndef real_output(size):\n  \"\"\"\n  Creates target output for calculating Loss \n  \"\"\"\n  data = Variable(torch.ones(size,1))\n  if torch.cuda.is_available():\n    return data.cuda()\n  else:\n    return data\n\ndef fake_output(size):\n  \"\"\"\n  Creates target output for calculating Loss \n  \"\"\"\n  data = Variable(torch.zeros(size,1))\n  if torch.cuda.is_available():\n    return data.cuda()\n  else:\n    return data\n  ","metadata":{"id":"mXZf0AO_twcz","execution":{"iopub.status.busy":"2021-06-12T19:03:00.928910Z","iopub.execute_input":"2021-06-12T19:03:00.929637Z","iopub.status.idle":"2021-06-12T19:03:00.939634Z","shell.execute_reply.started":"2021-06-12T19:03:00.929589Z","shell.execute_reply":"2021-06-12T19:03:00.938445Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"lr = 0.0004\ndescriminator_optimizer = optim.Adam(discriminator.parameters(), lr = lr)\ngenerator_optimizer = optim.Adam(generator.parameters(), lr = lr)\n\ndef train_discriminator(descriminator_optimizer, real_data, fake_data, batch_size):\n\n  ##In PyTorch , we need to set the gradients to zero before starting to do backpropragation \n  ##because PyTorch accumulates the gradients on subsequent backward passes.\n  descriminator_optimizer.zero_grad()\n\n  ##Prediction on real data\n  prediction_real = discriminator(real_data)\n\n  ##Calculate error and backpropagate\n  error_real = loss(prediction_real, real_output(batch_size))\n  error_real.backward()\n\n  ##Prediction on fake data\n  prediction_fake = discriminator(fake_data)\n  error_fake = loss(prediction_fake, fake_output(batch_size))\n  error_fake.backward()\n\n  ##update weights with gradients\n  descriminator_optimizer.step()\n\n  return error_real + error_fake , prediction_real, prediction_fake\n\n","metadata":{"id":"vdKsaPe9ujh7","execution":{"iopub.status.busy":"2021-06-12T19:03:00.941426Z","iopub.execute_input":"2021-06-12T19:03:00.941893Z","iopub.status.idle":"2021-06-12T19:03:00.951297Z","shell.execute_reply.started":"2021-06-12T19:03:00.941846Z","shell.execute_reply":"2021-06-12T19:03:00.949901Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"def train_generator(generator_optimizer, fake_data, batch_size):\n\n  generator_optimizer.zero_grad()\n\n  prediction = discriminator(fake_data)\n  error = loss(prediction,real_output(batch_size))\n  error.backward()\n\n  generator_optimizer.step()\n\n  # we will use this loss for printing\n  return error","metadata":{"id":"2r_BhUaq84Bn","execution":{"iopub.status.busy":"2021-06-12T19:03:00.953191Z","iopub.execute_input":"2021-06-12T19:03:00.954105Z","iopub.status.idle":"2021-06-12T19:03:00.961963Z","shell.execute_reply.started":"2021-06-12T19:03:00.954052Z","shell.execute_reply":"2021-06-12T19:03:00.960833Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"num_test_samples = 8\ntest_noise = generate_noise(num_test_samples)","metadata":{"id":"ww6OmNJ-9ZQ9","execution":{"iopub.status.busy":"2021-06-12T19:03:00.963791Z","iopub.execute_input":"2021-06-12T19:03:00.964259Z","iopub.status.idle":"2021-06-12T19:03:00.982594Z","shell.execute_reply.started":"2021-06-12T19:03:00.964213Z","shell.execute_reply":"2021-06-12T19:03:00.981239Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"def images_to_vectors(images):\n    return images.view(images.size(0), 784)\n\ndef vectors_to_images(vectors):\n    return vectors.view(vectors.size(0), 1, 28, 28)","metadata":{"id":"iR69rNRD9wpg","execution":{"iopub.status.busy":"2021-06-12T19:03:00.984295Z","iopub.execute_input":"2021-06-12T19:03:00.984903Z","iopub.status.idle":"2021-06-12T19:03:00.993119Z","shell.execute_reply.started":"2021-06-12T19:03:00.984858Z","shell.execute_reply":"2021-06-12T19:03:00.991891Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"def display_images(images, num_images, format='NCHW', normalize=True,plot_horizontal=True):\n    '''\n    input images are expected in format (NCHW)\n    '''\n    if type(images) == np.ndarray:\n        images = torch.from_numpy(images)\n    \n    if format=='NHWC':\n        images = images.transpose(1,3)\n    \n    # Make horizontal grid from image tensor\n    horizontal_grid = vutils.make_grid(\n        images, normalize=normalize, scale_each=True)\n    \n    # Plot it\n    fig = plt.figure(figsize=(16, 16))\n    plt.imshow(np.moveaxis(horizontal_grid.numpy(), 0, -1))\n    plt.axis('off')\n    if plot_horizontal:\n        display.display(plt.gcf())\n    plt.close()\n    \n\n","metadata":{"id":"tVu4b-64AwaL","execution":{"iopub.status.busy":"2021-06-12T19:03:00.994470Z","iopub.execute_input":"2021-06-12T19:03:00.994953Z","iopub.status.idle":"2021-06-12T19:03:01.005679Z","shell.execute_reply.started":"2021-06-12T19:03:00.994908Z","shell.execute_reply":"2021-06-12T19:03:01.003887Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"for epoch in range(num_epochs):\n    for n_batch, (real_batch,_) in enumerate(data_loader):\n\n        #Train Discriminator\n        real_data = Variable(images_to_vectors(real_batch))\n        if torch.cuda.is_available(): \n          real_data = real_data.cuda()\n        batch_size = real_data.size(0)\n\n        # Generate fake data\n        fake_data = generator(generate_noise(batch_size)).detach()\n        # Train discriminator\n        d_error, d_prediction_real, d_prediction_fake = train_discriminator(descriminator_optimizer,\n                                                                real_data, \n                                                                fake_data,\n                                                                batch_size)\n\n        #Train Generator\n        # Generate fake data\n        fake_data = generator(generate_noise(batch_size))\n        # Train Generator\n        g_error = train_generator(generator_optimizer, \n                                  fake_data,\n                                  batch_size)\n\n        if n_batch%100 == 0:\n            display.clear_output(True)\n            print(\"Current Epoch = {}/{} : Current Batch = {}/{}\".format(epoch,num_epochs,n_batch,num_batches))\n            ##print(d_error, g_error, epoch, n_batch, num_batches)\n            ## Generate test images using generator\n            test_images = vectors_to_images(generator(test_noise)).data.cpu()\n            display_images(test_images, num_test_samples, format='NCHW', normalize=True)\n            print(\"Discriminator Loss = {:.3f} : Generator Loss = {:.3f}\".format(d_error,g_error,))\n            print(\"Mean D(x) Real : {:.3f}, Mean D(G(z)) Fake : {:.3f}\".format(d_prediction_real.mean(),d_prediction_fake.mean()))\n","metadata":{"id":"kTkfMRk99bRV","outputId":"eafa44ac-99d0-4188-9758-7b9cda1c22e7","execution":{"iopub.status.busy":"2021-06-12T19:03:01.007692Z","iopub.execute_input":"2021-06-12T19:03:01.008439Z","iopub.status.idle":"2021-06-12T19:21:46.739455Z","shell.execute_reply.started":"2021-06-12T19:03:01.008346Z","shell.execute_reply":"2021-06-12T19:21:46.738275Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"Current Epoch = 49/50 : Current Batch = 500/600\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1152x1152 with 1 Axes>","image/png":"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5p40Q9G7d29X2/2mt/Lu1q2bq2+55ZY41tfSwoULXa1ZzwULFsSxtnk45JBDXP3KK6/E8dlnn+3mNBNlt6NQBsHO5zmXNbtZrmyMfd2FEMK+++7rapsTTWXVQvDnkp5XmnvT10iqxYJm0O6///44vvLKK93chRde6OqDDz44jg8//HA3Vw35HHtebbPNNm7uo48+crV9ren+13YSqf2t+eTBgwe72r5n2XsAhBDC7rvv7uo5c+bE8a677urm9H3R/q6aperVq5erZ82aFceNLSOnn40mTJgQxwcddFDyZ/Uab68j9nFCCOGEE05wtX1NPPLII27u+OOPr/E5df/bTHEI2ff5SqefYWzeWvPreg6mMrqaDdZ5e43UfPg//vEPV++9995xrJ+FtBWObR9k3+dCyL7W7LEq5efuxqzQtdaqayuhSkXrDAAAAABALnxZBAAAAABk8GURAAAAAJBRsj6LmslJ5bBsX7wQsmvKNcuRYnNOug5fe1NdeumlcWz74IXgM4oh+GyY9pVTtteNrm+uxPX9qcyirsPX46oZTJt907ym9r28++6741j7A9l1+CH4jIvmoTRXYB9Lt3/UqFGuthkc20szhBD+/Oc/u3rZsmWu/vjjj+P4hRdecHMHHHCAq+1rUXMnmivT115KKqeoeQXdF3YtfqG8nc0fXX311W5Oc6C2Z5r2U/vlL3/paptp1ON60003udqeryH464LmOoYMGeLqO+64I441L5X63Qvtl7pmjsuZw7Lns+Yxx44d62qbzb7qqqvcXOfOnV1tX5cXXHCBm5s+fbqrtb/sT37ykzjW46z9QW1uSHuK6Xk2bNiwOK7EjGKevlt6fczTl1aPs53X995Bgwa5+plnnnG13f+a49brvX1sfR/p0KGDq+11Qa8ZmkMv1Nusmum5b7P8qUx0CNk+kbvssksc6/uVng/2sbp06VLr7bX3Cwghm+vLo1x96PR8SPUN1v1i75egPb61r7ftOfmb3/zGzR155JGu1s80S5cujWPNeOu5Y18juk02px2C74Vte5KHkL1+Xn/99XGsWbxKuH9GJdL7l0ydOrWBtqSy8JdFAAAAAEAGXxYBAAAAABl8WQQAAAAAZJQss5ha165rozXXdPHFF7t64MCBcWxzYiFkszOvv/56jc/7xhtvuNrmdwr1nNl5551r/LeasbS/XyVmFJX+Pnb9vM5p78FU3lF/d+17aR9bs5A2ixFCCI8++mgcF+qTZ/e/5gaU7RN2ySWXuDnN+Gn+dNq0aXGs++Wee+5xtd1+zcxpn7k8bAZEf1fNgun8okWLanxcPa72NT5jxgw3N3nyZFfbnMSxxx7r5jT3afOm2kNP96lmNWxfPe19etttt7las1ZWKkdTrj6L5ZTK7uk+nTlzZhyfccYZycdduXJlHOvvmuphG4LPm9rsTgjZfbzjjjvWuL32nNOfLVceqhiFtsFeA7X3mv4+lmZE9X3QZngL9V9NbWMq+1XocWbPnu1qew085phj3Nxrr71W6+epdnpcDzzwwDjWTL32NOzZs6er7etHM/dqp512imPNI6fo/Rxs7i2vcp2Tqdep7m+9Po4YMSKO+/Xr5+a0d6jdF4XupaHPY99T9fzV91TbB1Pv36C9Z+3nFu3vrNda24tT+ztj/Qr1Pq3ErHx94C+LAAAAAIAMviwCAAAAADJKtgw1D10i9s4777jaLknU24CnWnIUUmjpqWWXuemy02Iet1yKWZKV59/qn+DtvtHj+q9//cvV9vbReit13QZ7e/fFixfXevt0eYq91X4Ifmmy3n5bl0wed9xxNT6PtgrQ/WKXCBW6PXpdj5Uu2dM6RZfcKnub7dGjR7s5ezvxEPzyHF3utNtuu7n68ccfj2NdTqznmdZ2me0f/vAHN6f70LYA0GXAqSWqqWXW+jyVuAyyEPsa0VYrqd81LxtL0OOo+3/ixIlxrOegstt04oknurnHHnss93bWNxvBGDBggJvT/W+X8V922WVuTltNFHOs9DWf2qYUPa7t27eP40033dTNaXxEl9M1hHKdz6l9qG2gtAXTdddd5+opU6bE8fjx493cdttt5+q//vWvubbz/9N2Nbpf7HVDP49VwjVQt+GII45wtf39xowZ4+b0PVQ/p1h6XDVWYaMp+hkxtZ90fz///POuPumkk+JY23AtWbLE1amYFtZvwYIFyfk8S/UbQqHPMHV+3JI8CgAAAACgUeHLIgAAAAAggy+LAAAAAICMOmcW9fbKd955Z61/Vtdv69r7SqC5rBTbSkBbQqxdu9bVqduj51nvX18ZxUJsTkW3qUePHq62OTKlP7v33nvHcZ5bPut6bW3zYPMWvXv3dnOaoTvhhBNcPXLkyDjWdeC6/fY1XsosjM3+2Fzh+mgmzeZL9BzUVgg256evYd1P9tbe2jpDf1ebuVF62/I+ffq42rZy2Guvvdzc8uXLXW3bMWj7HW0hYo+l7hfNtdqsZzEtUCpBnjY/hV7Dem7bfa4/q3lZm1nM4+mnn67TzzWk+fPnx/Eee+zh5vTaZVv3aOavmGtIKqtayse1WdUPPvjAzV199dV1fp5yqa+8nc2i6jUk1ZYrBH9bf82tprKnhdjr3llnnZXchlRmS6+XlZDv0uym/X30WjRr1ixX33///XF88sknu7kuXbq4Wt9n6kr391VXXeXqZs2axbG2J7P3BAghnc/H+l177bXJeW13U2nK1dqDvywCAAAAADL4sggAAAAAyODLIgAAAAAgo86ZRc0o2h56IeTLw1SiQYMG1frf2ryOrhfWHIFmElJ9I1P9UkrZV8s+VqHHTWWX9GdfeuklV2ueM+Xyyy+PY83M3Xfffa62+7Bt27Zu7sc//rGrbdbtqKOOcnPaX0pzcdoXzcpzPAr1nUux/esKydOTdPXq1a6226g5Pj2Ob775Zhyfdtppbk4zIfvuu28c/+1vf3NzQ4YMcbXm4Gx90UUXuTnb1zIEn3/UvNSkSZNcrf1ALc3c2F6PlaiYfKz+rK31mqHZJNtrMwSfxdI8rL6ebI6vELsdlZCHymv//fePY5tJDCG7X+w5ePPNN7u5I4880tW2P6UeG80Cz5s3z9XbbrttHC9cuNDNaSbK7n99r9Nrr71ud+jQwc29//774bvKnlc77bRTrf+tKiajqNdL2+dS32/zqIRzUvdZ6jOZXh+1z6v9HKs9DfU9s1S6devmau29aXsp6nl02223uZrMYu3YzxaavU792+8S/rIIAAAAAMjgyyIAAAAAIKPOy1BVtS87bd26tatPOeWUONalClrvvPPOcfz222+7ueeee87V11xzjavtMgFdLpHnFri63E+XNNX2cQstY8uzrE2XaXz11VdxrEsx9XmbN2++3nEIITz44IOutssXt99+ezc3Z84cVx999NFxrLe61uWKV1xxRSiFVFuNvOwSGn2cPEsQdf+ntkkfR5e2zJw5M471tXXrrbe6+rDDDovjBQsWuLlCS7IsXSpyySWXuPqRRx6JY711um3BEUK+17R9DVeiPL9L06ZNXa2tZF599dU4fuqpp9zc4Ycf7up//vOfrm7Tpk0ca2uMQw45xNW2TY59zhAKLymrNvaao/tU97+9puu5oe8zdsn50KFD3dxuu+3maj0fbCscPbdTSx312Gy++eau7tixYxzrUmNdtmyXv1b7MS7ELhM+9NBDS/a4ut9mz54dx927d3dzumRYl6VWs0LXQLuf9DWsS3BtHEnfM8tl9OjRrtbnteeZxqVsyyvUnn1ft8vy1+fEE08s9+ZUJP6yCAAAAADI4MsiAAAAACCDL4sAAAAAgIwmqfXdTZo0qXN/Bnt72Ty3+68vO+ywg6vnzp1b65/VbIDNeWh2s2XLlq7u1auXq22uwN5uvpyKub1+Hs2aNXN1//794/j3v/+9m7vhhhtcPWvWrDjW27lvtdVWrra3oF++fLmb09/NZob0FtUvvviiq4u5hXhK6nbo5ToWSrNImgG0LS4076K3wd9nn33iWNskaPuOxYsXx7GeR/o82gLAZjcmT57s5jSnNWXKlFATfV6b1yx0zO2xK2Wezmb8Qsi+5kvFtj2x+dEQQthiiy1cbXNyN910k5srlFG3z6PZVL29vm3tsPXWW7u5PG01qoF9X7zyyivd3EknnVTjv9X9oueVzZxpVlyz2IMHD3b1J598Esd6/dx0001dbVtpaE5eryHXXnttHI8fP97NTZ061dXlakNQiex5N27cODen+zTFHrcQQjjzzDNd/fzzz8dxY8+B5mHfV/Qzit4fwWZKn3zySTenOU/NFtocXKH3dZtD1FZO+l5t24FNmDAh+bioHbv/7WefELLZcvv6aWytSdatW1fjh1P+sggAAAAAyODLIgAAAAAggy+LAAAAAICMsjWOsTlFXctdynW+NjekWSrt/XX66afH8X333Vfr59D15prBtFkNzXxoDshuQwghXHbZZTU+b57eiXno75PqpVXKPou239qzzz7r5lasWOFqm7HQ/aB5Hfv6OuaYY9zc2LFjXW2Pz6RJk9xcuTKKhZQqp6jHMXWc9bWk56jto3fqqae6Oc0S2pyH5vg0V2N7vi1ZssTNaQ9Dm28MweeKzzrrLDdne8WFkD5Xisns2n9bynxpMRlFe1wLZZPsa1xzZMX8Pueee66rhw8fvt7tC8Hn3kIIoVOnTnG8dOnSOm9DNWjRokUc6+v7wgsvdPV5550Xx5qv1h6xNqOr18vHHnvM1X//+99dbXOJ+rPaD9Ge+3rNbt++faiJ/q49e/Z09SuvvBLHjS0HpNfWc845J47zZBSV5u3ee+89V+e5LnyX2NeXXou0n6m9P8KWW27p5vRnU/ecKHSPAHst1vPq9ttvd7XNoqI0bP704YcfdnP6ueTggw+OY+1Z25jxl0UAAAAAQAZfFgEAAAAAGXxZBAAAAABklK3PoqXrtYtZP2976oXge9Lo76LZJP1ZS3MS9rG0p9vbb7/tapuD0wyi9uK55pprXG33xUMPPVTj9lUjzWrY3muaD8yTU9FeSHb9f6tWrdycZmXs8Uj1ywyhuAyXfc1rLqWYbGSpejTq42gOsW/fvnFs84shhHD00Ue72h7Xxx9/3M0df/zxrrY93zTndtFFF7l67733dvVdd90VxyNHjnRzmitAee2+++6ufuedd2r8t/q6HDJkiKttP77Gnq2y18S2bdu6Oa07d+4cx5qj0XyUvd5oHkrpuW8z+Pqzeu2ymWO91m677bauXrZsWRwfeeSRbs7m9kLwGeP66jVbLrZnWwjZHG7qGp6H9tjT/qWXX355HM+ZM6ckz9nY2Peu9bH3mBg1apSb08xiip5Her20fXbHjBnj5mx2OYTvVk/S+mKvXYsWLUr+W/v584svvijbNjUE+iwCAAAAAHLhyyIAAAAAIKNsrTOsUi4t0qVpdvlcnuWuemt9vRW5XX7wxhtvuDl7q/EQQnjyySfj+IADDnBzX3/9tau1nYfd5lIu162rUm5Dy5YtXW2XML388su1fhxdtqO1XQ616667ujldsmqXDOsSAl0upMtSU/tC95v9Wf25YvZxqZZo6eNssskmrp46dWocP/HEE8l/a5ex6e3cdbmcbXui54K9TXkI2VvBz5w5M451+VB9LUO1r71qXy6Xh55zqWWnykYFQgjhuuuuc3Vj3o+632x7J71Ffu/evV197733xnGhpWepZZy6XFSXz6WW4un2Dxs2LI73228/N6fXS7v0UVsa6ftvtb8G7H4aNGhQjXN5vf76666272/6+jn00ENdrdECZGkkRN+bbYu1vK9R+1gax9h5551r/Lnu3bu7mohF+T3zzDM1zulxT7VIacz4yyIAAAAAIIMviwAAAACADL4sAgAAAAAy6iWzqHQNfzG3/J81a1Yca15N15/bjNpNN93k5nTN8rvvvhvH2nJDb409YMCAONbchubgNt54Y1en1qPr7ZY151FpdHtbtGjh6h49esTxjBkz3Jy2GLE5Pj2ONiMXgs++zZ0718117drV1dtss00cb7bZZm5Os1Wa5bG/jx7XXXbZxdU2X6c0o1iqHJzuJz1X7PPq82j+xdb6b1etWlXjNuixmTJliqtfeumlONa8iJ6T99xzj6vtua7PU4w8+9/OF3Mdy0NzoPV163R7Putt+QsZN25cHGterb72WyWyrWMefPBBN5dqyZRnn+l1YM8993S15uBseyHNI+t7nW2Zotd7fV3a29HrtVZbGhXTTqgh7LDDDq5u165dHGtroRQ9jpqj1xZBTZs2jWPNJOr9Euz1ErVTyvtEdOrUKY4HDx7s5lauXOlqe32dPn26m9PzudrZa0Ge9iPltN1229U49+qrr7q6sbd3qknjehUCAAAAAEqCL4sAAAAAgAy+LAIAAAAAMhoks1hMRuWFF15wte2HOGnSJDenOY/x48fH8ZAhQ5LbZGvNU5x99tmutlkrzb3p+uY8PXPKlVH8/vf9YbfPU8x6bP1Z7UdjMzmat9Bt2nHHHeN44cKFyeexfS9tLjKEbO+padOmxbH2etTXy4YbbuhqmyfROc1K2u3XfoKqXJktzVxqz88Um5PI8zrUfO+LL77oaptR0H141llnufqTTz5xdc+ePePYnsuFFMp75dn/dr/kOVdSvSkL0SxYqi+eXqtSv7vOjRo1ytX9+vWr9TYqzSnWtA3VoJiMpf5be517//333dxFF13kant9evPNN92cnpM2W9i3b183p32BNVe/xRZbxLH2f9PzzGbmCvVq7dy5cxzPmzfPzVVCDkszl+eff76rb7311jjWew388Ic/dLXtx6c5z5Q+ffq4esKECa7W90nbu1j7Z+rr9IQTTojjxx57zM1V2zlYjQ488MA41s99+r542223xfHWW2+dfNxq7/VbCTlFvf4sW7YsjvVzieaT7bVAj6teU+zzVFsuWzX8FRsAAAAAUHH4sggAAAAAyODLIgAAAAAgo0EyiyrVT7BQ7zibz9BchPZOsb38tO+T7WmltH/jK6+84mrbk66UPVjK1Y+smMxWnsfVfWFzN3rMDzvsMFd//PHHcaz9Gm3/rhBCuOuuu+JY15ffe++9rp46dWoc23Xq69t+rTt06BDHH330kZv75ptvXF0op1gOuk9TGUU9r1LZKp3Tn7WZKM1S2YxTCH69/yGHHOLm9tlnH1d/+umnrrZ5ZT03Ur9PMa/vVK/KPErZF3L48OGuPu+88+JYX+/at61Xr17rHeel+yGVo6x2pcwF2Uy1zQqG4PNoIfgc04gRI9ycZhibN28ex23atHFz+trTHrf2uqG5Q82SW/oamD17tqvtNVxVQs9g3QabUVStW7d2tf6uut9qa/vtt3f1pZde6uo//elPrrbHVq8D+nnn+eefj+P999/fzQ0cODD/xiJJzxV7bLVf5pw5c1xt+6++8847bk6zbtWYU6wtfR8vV09DzSDb3pbal1bP0bFjx8ax5sP1mq6fE6sZf1kEAAAAAGTwZREAAAAAkNEk9SftJk2a1Prv3boEzv75uNCfzbfaaitXL126NLVNrrYtCvTP93YZTwj+VuTPPfdcjdur9E/Wp556qqsnT54cx3Y5QV7lWnaa93lTc3mWBehtv+1x1mOsyxXtErnjjz/ezfXu3dvVdomQXWocQgg/+tGPXK1LlS3d3/qatvO65ERvR2/3my530n1q6zz7t9A2pKTO1xB8Cwz9t3q76G222SaOdTmxLoPs3r17HNvlkyFkb/F/xx13uPqyyy6L41IuzanEW5HbZW133323mzvjjDNcPXPmzDhu3769mytmeajdx7qksFOnTq4u13KhxsaeV3quaOuS1FJqG30IwS811fcrvRV/6npfaHn6qlWr4njYsGFuTpdFrlmzpsbn1GtiQ7zXFfOceu21x+7YY4+t9ePoeVOopYjd5vnz57s5jWDYaMTo0aPd3CmnnFLj46J29thjD1frEuKjjz46jpcsWVLjXAh+WSrHov7Z8+63v/2tm/vFL37h6ldffTWOx40b5+bGjBnjav38U+nWrVtX45sDf1kEAAAAAGTwZREAAAAAkMGXRQAAAABARslaZxRzK2zNr6VyBVrb3Ie9pW0I2cyizYukchvK3u48hBBuueUWV2uGztK8l2aIbHuDhlqrbtdrF8qS5MlVajsJm7Pp0qWLm9Pbxtv8hc2lhpDN4Nh14ba9QgilbWFhf1fNmhRqG5L6t3mO+4YbbhjHeTKKqtD221yivmY1L2iP64QJE9xcnz59XG1v2a63m9dt0N/P1sWcK/V1e+5i2AzaxIkT3Zzu/3333TeOx48f7+Z69uxZ6+fUffruu+/G8V577ZX8t6idL7/8Mo5ta4MQQnj00Udd3a9fvzjW9xG9Rbu9JuZ5bwvBn1cHHnigm3vvvfdcbTOLmtvT16Wl299Q+fw8z2O3Wd8X9drUv3//OL7zzjvdnN1nIYTw61//Oo4LZRSVfU/VVhnqrbfeiuNf/epXbo7zd/30eLRt2zaONVPcrVs3V6fuA6CtbjT3z/FoWPZYDR061M098MADrrZt9rQ9WbmOYyV8ZuEviwAAAACADL4sAgAAAAAy+LIIAAAAAMgoWZ/FSmDzXCGE0LVrV1fb3n2333578rFsHuPGG290c9r37LXXXovjLbfc0s1pbi+lmHXJDZUBsX3dFixY4Ob0eNhtsr35QshmcI477rg4vuCCC9yc7d8Vgu9tc+WVV7q5ZcuW1bDl2Sye1qXKFaT6KoZQ9/XnxRzzQv3UUjnWVCZKcxt6PGxmUfsq2l5TIYRw0EEHuXrlypU1bkN9ZQXs8zRr1szNaY/P+mLPs80228zNTZs2zdXt2rWLY5uLDCGEvn37utrm1VLnUQjl2//6eiomG18JbN/XN954I/lvt9122zjW3prao9Hmpwplge15FEIII0eOjGM9X8lSlZ69dmmmWDP32qfNZkrnzp3r5vRY2XP9o48+qtvGhob7bFEJbG5Ys2t6nil7fbX9hUMI4cMPPyzB1qHSVWIP5xT6LAIAAAAAcuHLIgAAAAAgoyKXoaZuWZ1allRouUSePwnb5WeTJk1yc3YpXQghzJw5M47LeUvb1PY31LI8+/vqNui/tcs2dHmN3obdLi3VW4936tTJ1Xb56CmnnOLmZsyYEWpSaNlvfd2uuGPHjnGcZ3lKoaWkWrdp0yaOFy5cWOvnadq0qat1+Y1tB6BLS3UpqV1apy1nzjzzTFevXr3a1bosuFTqulSkVatWrl60aFHJtqmubr75ZlffcMMNrrZtivQ41tcy2nKdV9pKYPHixSV53EqUWtqu+1PPSaXXYvyv1OeQUvkuL/GsBvb42BZFIYTwyCOPuHrAgAGunjJlShxX+3HVSFGeeBWqB8tQAQAAAAC58GURAAAAAJDBl0UAAAAAQEa9ZBZTt9oPoXTruTt37uzqWbNm1fmxbAuMFStWuLlUJqRQ/sPeOj2EEKZPn17XTSwZmxfUPNHatWtr/bP6b1N5DM2e/vSnP3W13f933XWXmxs1apSrR4wYEccTJ050c9oe4Ntvvw01sZm+ELK5Prtv9HfLk2nRn01lOfM8jp5H2gqk0LGs6bFLmY/dcccd43jevHlurkOHDq5evny5q/WW/7WV5/qTZ5/qa6mhcin2dZkn/7fxxhu7ulyZ0MamvrLMAIpXqlxo69atXa1tTnbZZZc6PS5QKcgsAgAAAABy4csiAAAAACCDL4sAAAAAgIx6ySw2VMYjT2ZOM2d17b1WDTbaaCNXr1mzpoG2pHaaNWvmas312ddX6jiG4I97Kr+4vp9NvQ7y9J/ULGFdexaVs0+k/dlC/RtTtH9moX1eafTYpTK6QGNDH8DGoVzHMc/nqFI+byUiy4xqR2YRAAAAAJALXxYBAAAAABl8WQQAAAAAZNRLZhEAAAAAUHnILAIAAAAAcuHLIgAAAAAggy+LAAAAAIAMviwCAAAAADL4sggAAAAAyODLIgAAAAAgI9k6AwAAAADw3cRfFgEAAAAAGXxZBAAAAABk8GURAAAAAJDBl0UAAAAAQAZfFgEAAAAAGXxZBAAAAABk/D/0blPBRGFcKQAAAABJRU5ErkJggg==\n"},"metadata":{}},{"name":"stdout","text":"Discriminator Loss = 0.796 : Generator Loss = 1.472\nMean D(x) Real : 0.757, Mean D(G(z)) Fake : 0.298\n","output_type":"stream"}]},{"cell_type":"code","source":"torch.save(generator.state_dict(),\n                   './gen',)\ntorch.save(discriminator.state_dict(),\n                   './dis',)","metadata":{"id":"S580FhwPNxxk","execution":{"iopub.status.busy":"2021-06-12T19:24:13.471454Z","iopub.execute_input":"2021-06-12T19:24:13.471832Z","iopub.status.idle":"2021-06-12T19:24:13.503229Z","shell.execute_reply.started":"2021-06-12T19:24:13.471800Z","shell.execute_reply":"2021-06-12T19:24:13.501910Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"\"\"\"\nReferences\nhttps://github.com/andersy005/deep-learning\nhttps://github.com/diegoalejogm/gans\n\"\"\"","metadata":{"id":"9vIaOn_69qnD","execution":{"iopub.status.busy":"2021-06-12T19:21:46.756000Z","iopub.status.idle":"2021-06-12T19:21:46.757058Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_noise = generate_noise(num_test_samples)\n\nfor i in range(0,100):\n    test_noise = test_noise + .30*generate_noise(num_test_samples)\n    display.clear_output(True)\n    test_images = vectors_to_images(generator(test_noise)).data.cpu()\n    display_images(test_images, num_test_samples, format='NCHW', normalize=True)\n","metadata":{"id":"ADRFyZlANpb9","execution":{"iopub.status.busy":"2021-06-12T19:35:59.867781Z","iopub.execute_input":"2021-06-12T19:35:59.868186Z","iopub.status.idle":"2021-06-12T19:36:06.334480Z","shell.execute_reply.started":"2021-06-12T19:35:59.868139Z","shell.execute_reply":"2021-06-12T19:36:06.332876Z"},"trusted":true},"execution_count":52,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1152x1152 with 1 Axes>","image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2021-06-12T19:27:25.911388Z","iopub.execute_input":"2021-06-12T19:27:25.911862Z","iopub.status.idle":"2021-06-12T19:27:25.982861Z","shell.execute_reply.started":"2021-06-12T19:27:25.911819Z","shell.execute_reply":"2021-06-12T19:27:25.981665Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"tensor([[-5.4064e-01, -5.5841e-01,  1.9203e+00, -6.3982e-01,  1.5371e+00,\n          6.8297e-01,  1.0150e+00,  5.2402e-01, -8.5236e-01,  7.8860e-01,\n          6.2519e-01, -1.0498e+00, -9.9833e-01,  1.2477e-01,  2.2406e-01,\n          1.2606e+00, -6.9056e-01,  4.1747e-01,  7.5366e-01,  9.3441e-01,\n         -4.7071e-01, -7.2464e-01,  1.8185e+00,  1.2749e-01,  3.9096e-01,\n         -5.3306e-01, -2.1313e+00, -9.9550e-01,  8.9017e-01, -2.9924e-01,\n         -1.5169e+00, -7.9386e-01,  5.5480e-01,  2.2990e+00, -1.0903e+00,\n         -1.6944e+00, -2.4437e-01,  1.5657e+00,  7.1843e-01,  8.9294e-01,\n          2.8696e+00,  2.9135e-01, -8.2538e-01, -1.0753e+00, -1.5658e+00,\n         -4.5656e-02, -7.0524e-02,  6.5745e-04, -1.3729e-01, -4.3946e-02,\n          9.2000e-02,  1.3331e+00,  5.4028e-01,  4.5659e-01, -3.4251e-01,\n         -2.3395e-01,  5.3851e-01,  5.2924e-01, -9.6274e-01, -1.7158e+00,\n          1.9343e+00, -2.0539e-01, -4.7470e-01,  1.6901e+00, -4.3177e-01,\n          5.7699e-01,  5.8577e-01, -7.4285e-01,  4.8351e-01, -9.5190e-01,\n          1.1623e+00, -9.7347e-01,  2.2981e+00,  1.9121e+00, -1.2390e+00,\n          1.0408e+00,  1.3757e+00,  1.0506e+00, -8.9785e-01, -2.7116e-01,\n          7.9823e-01, -3.4516e-02,  1.1796e-01,  2.2149e+00,  5.7743e-01,\n          2.7669e-01,  1.0350e+00, -8.3579e-01, -6.9896e-01,  6.6292e-01,\n         -4.8705e-01,  6.8820e-01, -2.0897e+00, -1.1395e+00,  4.9685e-01,\n          4.2305e-01, -2.6834e-01,  1.3299e+00,  2.7884e-01,  6.2805e-01],\n        [-1.0475e+00,  1.1661e+00, -1.0090e+00, -1.6122e-01,  1.6734e+00,\n          8.5504e-01, -6.9819e-01, -1.0042e+00,  7.2135e-01, -7.5074e-02,\n         -3.7218e-01,  5.4164e-01,  5.9875e-01, -1.1703e+00, -8.0097e-01,\n          1.3656e-01,  1.2593e-01,  5.7968e-01,  2.1087e+00, -7.1864e-01,\n         -6.0360e-01,  1.1104e+00, -1.2460e-01, -1.5699e+00,  1.1956e+00,\n         -1.8940e+00, -1.7295e-01,  5.0476e-01, -1.3243e+00, -1.2876e+00,\n         -7.4242e-02,  9.4179e-02, -1.5663e+00, -1.0196e+00,  5.9629e-01,\n         -4.8780e-03, -1.3738e+00,  1.7419e+00, -8.2772e-01, -4.7808e-01,\n         -1.3104e+00, -1.6162e+00,  1.5506e-01,  7.5757e-01, -4.6989e-01,\n          6.8035e-02,  8.3584e-02,  6.1491e-01,  2.0162e+00,  6.5025e-01,\n         -6.9368e-02, -1.4827e+00,  7.8209e-01, -2.4569e-01,  1.5943e-01,\n          4.2742e-01,  1.3796e+00, -1.2938e+00, -5.7381e-01,  1.7327e+00,\n          9.2576e-02,  7.1477e-01,  4.9333e-01, -2.0646e+00, -1.2381e+00,\n         -8.3694e-01,  1.1901e+00,  1.7983e-01,  5.4660e-01, -8.0161e-01,\n          8.3072e-01, -1.2679e-01,  1.3732e-01,  9.5936e-01, -9.6773e-01,\n         -1.2221e+00,  7.0288e-01, -1.4011e+00, -1.0556e+00, -5.3782e-01,\n          2.4397e-01, -6.9635e-01, -1.0314e-01,  4.8293e-01,  1.8431e+00,\n         -1.0648e-01,  3.2455e-01, -5.4889e-01, -8.6776e-01, -1.0998e-01,\n          2.0612e+00, -1.0398e+00,  3.6485e-01, -4.5577e-01,  9.1489e-01,\n          1.8587e+00, -3.4831e-01,  7.1177e-01,  1.7116e+00, -6.2391e-01],\n        [-4.5858e-01, -3.0555e-01, -1.8327e-01,  9.3881e-01, -9.9887e-01,\n          7.5118e-01,  6.9772e-01, -2.9920e-01, -1.1086e+00,  1.2586e-01,\n         -5.8687e-01,  4.9758e-01, -2.5584e+00, -1.1710e+00, -1.7127e-01,\n         -5.4022e-01,  5.0556e-01, -1.0472e+00,  1.6324e+00, -1.0054e+00,\n         -1.8701e+00,  9.8460e-01,  9.3103e-01,  7.6384e-01, -1.7892e+00,\n         -1.6037e+00,  1.6765e+00, -8.1140e-01, -1.3589e-02,  5.5191e-01,\n         -1.9676e-02, -8.7723e-02, -1.3231e+00,  5.5970e-01, -1.9050e+00,\n          1.5010e-01, -1.5784e+00,  6.8987e-01, -5.5825e-01, -9.9827e-01,\n         -1.4864e+00, -1.5674e-01, -3.6522e-02,  1.9975e+00,  9.0229e-01,\n          2.6669e-01, -1.1073e+00,  4.4715e-02, -9.3907e-01, -1.0115e+00,\n          3.2483e-01, -3.0756e-01,  2.1337e-01, -1.6023e+00, -5.2799e-01,\n         -5.9417e-01, -1.3149e+00, -1.7283e-01,  6.8808e-01, -1.3253e+00,\n          6.6443e-01,  1.2512e-01, -2.3749e-01,  3.5374e-01,  3.5256e-01,\n         -1.4927e+00, -9.7229e-02,  7.5037e-01, -8.9095e-01,  1.0634e+00,\n         -9.2862e-01,  9.6880e-01,  2.3420e-01, -1.3093e-01,  2.9701e-01,\n         -1.3347e+00, -7.4319e-01, -4.4101e-01,  9.1595e-01,  6.5673e-01,\n         -1.3857e+00,  1.5115e+00,  7.2952e-01,  1.2208e+00, -1.8286e-02,\n          5.8895e-01,  5.8696e-02, -5.2304e-01, -3.2001e-01, -6.3002e-01,\n         -7.6195e-01,  1.5429e+00, -1.6000e+00,  5.7176e-01,  2.1884e+00,\n          1.2432e+00,  6.7116e-01, -1.5793e-01,  4.4213e-02, -1.8905e+00],\n        [ 1.7640e+00, -6.5263e-01,  9.6828e-01, -4.4151e-01, -4.2599e-01,\n         -3.2615e+00, -6.2060e-01, -8.8131e-01, -6.5792e-01, -1.2021e+00,\n          2.6818e+00, -3.3190e-01,  1.8382e-01, -4.4949e-01,  1.0008e+00,\n          6.4234e-01, -1.1423e+00,  2.1527e-01,  6.3654e-01, -4.9824e-01,\n          1.9454e+00,  3.8290e-01, -9.8030e-01, -3.4161e-01,  8.7394e-02,\n          4.2101e-01, -7.2699e-01,  1.2691e+00,  4.6667e-02,  3.5490e-01,\n         -8.6808e-01,  1.7498e+00,  1.9978e+00,  1.5026e+00, -1.6944e-01,\n          1.0698e+00,  3.7268e-01,  6.6897e-03, -4.0783e-01,  2.9753e-01,\n          1.6196e-02,  3.6696e-01,  8.6441e-01, -4.3899e-02, -1.7491e-01,\n         -6.8607e-01,  6.7927e-01,  6.2829e-01,  1.9810e-01,  1.1083e+00,\n          3.6183e-01,  2.2357e-01,  7.1285e-01,  1.1248e+00, -4.4333e-01,\n          7.2487e-01,  1.1597e+00, -1.5257e+00, -9.4006e-01,  8.0404e-01,\n         -2.4177e-01, -7.7176e-01, -6.1888e-01,  1.2259e+00,  1.0145e+00,\n         -2.0472e+00, -1.9569e+00, -5.2773e-01,  6.8175e-01,  1.0609e+00,\n         -3.2666e-01,  8.7047e-02, -7.3644e-01, -1.6814e+00,  1.2089e+00,\n         -6.2376e-01,  1.6295e+00, -7.5587e-01, -1.1353e+00, -4.2275e-01,\n          2.0271e-01, -7.1128e-01,  2.9446e-02,  9.9942e-01, -2.5927e+00,\n         -1.0521e-01,  6.1247e-02, -3.6005e-02,  9.0174e-01, -1.1351e+00,\n         -7.6852e-01,  3.0153e-01, -1.5639e+00, -1.2630e+00,  3.9726e-01,\n         -5.1724e-01,  3.6260e-03, -2.8590e-01, -1.2485e+00, -1.3175e-01],\n        [-1.1292e+00, -1.3074e+00,  3.1214e-01, -5.7697e-01, -1.0917e+00,\n          7.3570e-01, -5.8379e-01,  5.1182e-01, -6.8660e-02, -6.6444e-01,\n          2.2444e-01, -1.7199e+00,  1.4622e+00,  5.9418e-01,  8.0984e-01,\n         -5.2007e-01,  1.1268e+00, -1.0366e+00,  6.1361e-02,  3.3474e-02,\n         -5.4347e-01, -1.0441e+00,  1.1941e+00, -3.7375e-01,  1.3867e+00,\n          1.7381e-01, -4.0873e-01, -2.0117e-01,  6.2225e-01,  4.3893e-01,\n         -4.9726e-01, -3.1796e-01, -7.6290e-01,  1.3553e+00, -6.6632e-02,\n         -2.0034e+00, -1.1546e+00, -1.0710e+00,  1.9584e+00,  6.5033e-01,\n          1.1108e+00,  2.8840e-01, -6.1344e-01,  4.9274e-01,  7.0779e-01,\n         -5.9476e-01,  4.2507e-01, -9.9001e-01,  5.1633e-01,  7.1854e-01,\n         -7.8359e-02, -1.1066e-01, -4.6242e-01,  3.2500e-02,  1.1210e+00,\n          6.0934e-01, -7.5234e-01,  3.1462e-01,  1.5570e+00,  1.1976e+00,\n         -2.5854e-01,  4.1641e-01, -4.4654e-01,  1.0234e+00, -6.6464e-01,\n         -1.4780e+00,  1.6042e+00, -1.0762e+00,  1.0102e-01, -7.5117e-01,\n          3.2713e-01,  5.8991e-01,  4.7724e-02, -8.5819e-01, -1.9349e-01,\n          5.2475e-01,  9.6361e-01, -6.9525e-01, -9.9023e-02,  3.0719e-01,\n          4.4364e-01, -3.6483e-01,  2.0683e-02,  8.3696e-01,  1.0009e+00,\n         -4.7958e-01, -6.5144e-01,  1.0925e+00,  4.2402e-01, -6.4061e-01,\n          4.8271e-01, -5.5657e-01,  1.5125e+00,  1.7887e+00, -4.5256e-01,\n         -6.7396e-01, -3.3445e-01,  4.8973e-01,  5.8411e-01,  1.3407e+00],\n        [-5.9089e-01,  1.5583e+00, -1.7087e+00, -1.5348e+00, -2.2583e-01,\n          5.2527e-01,  1.0114e-01,  4.1169e-01,  1.0080e+00,  7.7406e-01,\n         -8.9893e-01, -3.6037e-02, -4.9876e-01, -1.2942e+00, -3.6700e-01,\n         -1.2640e+00,  2.0054e+00, -8.4350e-02, -5.9745e-01,  3.9083e-02,\n          7.8769e-02, -1.0630e+00,  4.2760e-01,  1.3848e+00, -1.0920e+00,\n         -4.8551e-02, -4.2015e-02, -3.9946e-01,  1.5811e+00, -1.2498e-01,\n         -3.3764e-01,  3.3879e-01,  1.6004e+00, -8.4856e-01,  6.1893e-01,\n         -1.1449e+00,  4.7415e-02,  1.2893e+00, -2.9399e+00,  1.4597e+00,\n          1.2997e-01, -1.6198e+00,  1.0778e+00,  8.4293e-01,  5.4804e-01,\n          7.0432e-02,  7.3968e-01,  4.6613e-01,  1.4510e+00, -9.4026e-01,\n         -5.6381e-02,  4.5387e-01,  1.0837e+00, -3.5532e-01,  6.6330e-01,\n          2.9436e-01,  3.2614e-01,  1.3210e+00,  4.7117e-01, -9.2232e-01,\n         -5.8933e-01, -7.8978e-01, -6.1097e-01,  3.4629e-01,  3.8348e-01,\n          1.0504e-01, -6.1581e-01, -1.1521e+00,  1.4900e+00, -2.7948e-01,\n          1.0176e+00, -1.4083e+00,  4.6843e-01,  6.2363e-01, -1.0406e+00,\n          1.8421e+00, -1.7209e-01,  3.8754e-02,  7.0578e-01, -3.2022e-01,\n          6.0538e-01,  2.1355e-01,  5.8082e-02,  1.4666e+00, -8.1854e-01,\n         -9.7298e-01, -2.1710e-01, -4.3145e-01,  1.2034e-01,  2.1039e-01,\n          2.1131e+00,  8.9580e-01,  1.2073e-01, -1.2016e+00,  3.0836e-01,\n          5.6910e-01, -8.0796e-01, -9.7439e-01,  1.8924e+00, -1.4110e+00],\n        [-6.7715e-01,  3.4650e-02, -5.4972e-01,  7.1959e-01, -1.5388e-01,\n          5.1712e-01,  1.8508e+00,  1.6268e+00,  3.3600e-01,  1.6311e+00,\n         -2.9738e+00, -6.3372e-01,  1.1995e+00,  4.3422e-02,  1.0388e+00,\n          7.3314e-01,  7.0871e-01, -5.5490e-01, -8.0149e-01,  1.1181e+00,\n          4.0806e-01, -7.3442e-01,  7.7414e-01,  2.0757e-01, -8.6281e-01,\n         -1.7356e-02, -6.2324e-01,  8.5167e-01,  4.6781e-01,  2.4041e+00,\n         -8.0735e-01, -1.7197e-01, -4.6983e-01,  1.4756e+00, -2.6382e+00,\n         -8.5978e-01,  8.6026e-02, -5.8861e-01, -1.6766e+00, -5.7956e-01,\n         -5.6559e-02, -4.8418e-01, -4.6453e-01, -7.6625e-01,  1.0050e+00,\n          7.0758e-01, -4.0489e-02, -9.7343e-01,  3.7936e-01, -6.5351e-01,\n         -6.2461e-01,  9.3591e-01,  1.2265e-02, -1.6891e-01, -6.3292e-01,\n          9.8538e-02,  1.8115e+00, -7.7307e-01,  5.5059e-01, -2.6449e-01,\n         -1.5354e-01,  9.3479e-01, -6.7977e-02,  2.6477e-01, -4.9840e-01,\n         -2.7220e-01,  3.5636e-01, -3.8559e-01, -1.7864e-01,  1.2228e-01,\n         -2.8475e+00, -1.8269e+00,  1.5703e+00, -1.0174e+00, -1.6805e-01,\n         -5.1701e-01, -5.9075e-01,  7.6152e-02, -2.4225e-01, -1.3141e+00,\n         -6.6841e-01, -3.3032e-01, -6.3532e-01,  1.5430e-01,  8.4767e-01,\n          1.1660e+00,  6.6968e-03, -1.1028e+00,  4.7762e-01,  5.1799e-01,\n         -1.6081e+00, -8.5389e-01,  4.9636e-01,  1.5047e-01, -1.6727e+00,\n          1.8455e+00, -2.4375e+00,  1.3559e+00,  8.5481e-01,  9.4881e-01],\n        [ 9.6109e-01, -5.4739e-01,  2.4751e-01,  5.8022e-01,  1.3879e+00,\n          3.6564e-01, -9.2335e-01,  5.2105e-01,  5.9359e-01, -8.9777e-01,\n          6.1641e-01, -7.9403e-01, -1.0205e+00, -7.5838e-01,  7.4440e-01,\n         -1.8840e+00, -3.6936e-01,  1.7373e+00,  1.0775e+00,  3.9474e-01,\n         -3.6384e-01, -9.3473e-03,  1.9548e+00, -5.5779e-01, -3.4139e-01,\n          9.5581e-03, -9.4140e-01,  1.3827e+00, -3.4018e-01,  6.7028e-01,\n         -2.1380e+00,  3.4479e-01, -8.9756e-01,  7.6235e-01, -5.8756e-01,\n         -1.2336e+00,  1.2435e+00, -6.2202e-01,  1.5196e+00,  1.7991e+00,\n          1.0763e+00,  1.1030e+00, -1.6367e+00,  9.9278e-01, -5.7829e-01,\n         -7.7867e-01,  6.4587e-01, -8.4301e-02,  1.2705e+00,  1.5090e+00,\n         -1.9733e+00, -6.7850e-01,  1.6577e+00, -1.4661e+00, -5.8533e-02,\n         -1.4114e+00, -6.9924e-01, -1.7563e+00,  1.6695e+00, -8.3918e-01,\n          3.9498e-01,  7.2853e-01, -9.6482e-01, -2.6966e-01,  1.1992e+00,\n          1.0533e+00,  3.0314e-01,  1.2005e+00,  8.1359e-01,  1.3511e-01,\n          6.0166e-01,  8.0739e-01, -1.2357e+00,  2.1014e+00,  5.2365e-01,\n          5.0261e-01, -3.0378e-02, -2.5520e-01, -2.5356e-01,  1.0413e+00,\n          3.4995e-01,  6.1140e-02,  1.5112e+00,  9.0207e-01,  1.8003e+00,\n          5.2516e-01,  2.0566e+00, -1.4857e+00, -1.8268e-02, -1.0723e+00,\n         -1.3829e+00, -6.1284e-01,  1.2415e+00, -5.4339e-01, -2.2742e-01,\n         -1.6571e+00,  1.7624e+00, -1.0526e+00,  8.7937e-02, -6.6646e-01]],\n       device='cuda:0')"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}